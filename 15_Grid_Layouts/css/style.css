@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  min-height: 100vh;
  /* Grid container; */
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  grid-auto-rows: 50px auto 50px;
  /* we can define names of items on the page - header and footer spans across all 9 columns*/
  grid-template-areas:
    "hd hd hd hd hd hd hd hd hd"
    "mn mn mn mn mn mn mn sb sb"
    "ft ft ft ft ft ft ft ft ft";
  gap: 0.7rem;
}

.el {
  background-color: rebeccapurple;
  color: white;
  display: grid;
  place-content: center;
}

.header {
  grid-area: hd;
}

.footer {
  grid-area: ft;
}

.sidebar {
  grid-area: sb;
  background-color: aqua;
}

.container {
  grid-area: mn;
  min-height: 400px;
  display: grid;
  /* we will have items stacked after each other in columns - columns automatically defined by the grid*/
  /* grid-auto-flow: column; */
  /* we can also use fractional units instead of absolute values in px*/
  grid-template-columns: 3fr 100px 2fr;
  /* middle column will be 100px and rest of the space the 3rd column will take 2 fractions and 1st column will consume 3 fractions */
  /* if multiple columns of same size we can use repeat */
  grid-template-columns: repeat(4, 1fr);
  /* grid can have empty space and number of rows is decided by the number of grid items - we can also repeat patterns */
  grid-template-columns: repeat(2, 1fr 2fr);
  /* absolute value in grid-auto-rows defines the height of the row we can also use minmax function - 150px tall min and max auto allows it to be taller*/
  /* It specifies the size of rows that are added to the grid automatically when grid items are placed into grid cells that are not explicitly defined by grid-template-rows - The grid-template-rows property allows you to define the exact number and size of rows in the grid container, providing more control over the layout.*/
  grid-auto-rows: minmax(150px, auto);
  /* gap between rows */
  row-gap: 1.2rem;
  column-gap: 1em;
  /* gap property defines both row and column values - row and column gaps respectively we can also leave it at one size for both*/
  gap: 1em 0.5em;
}

.box {
  background-color: #000;
  color: #fff;
  font-size: 2rem;
  padding: 0.5rem;
}

.box:first-child {
  background-color: blue;
  /* to span first 3 columns - we need to start at the first line and end in the 4th line that is after 3rd column and before 4th column */
  grid-column-start: 1;
  grid-column-end: 4;
  /* to span 2 rows - with starting grid line at the top and 3rd line before 3rd row*/
  grid-row-start: 1;
  /* grid-row-end: 3; */
  /* start line number/end line number - shorthand */
  grid-column: 1/3;
  grid-row: 1/3;
}

.box:nth-child(2) {
  background-color: red;
  grid-column: 1/5;
  grid-row: 3/4;

  /* Nested grid */
  display: grid;
  align-content: center;
  justify-content: center;
  /* shorthand property for both align-content and justify-content is, we can also give one value for both */
  place-content: center;
}
